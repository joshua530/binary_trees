// 16-binary_tree_is_perfect.c
/**
 * binary_tree_height - Measures the height of a binary tree
 * @tree: Pointer to the node to measures the height
 * Return: The height of the tree starting at @node
 */
size_t binary_tree_height(const binary_tree_t *tree)
{
	size_t height_l;
	size_t height_r;

	if (tree == NULL)
		return (0);

	/*recursively check the left and right node if exist*/
	height_l = tree->left ? 1 + binary_tree_height(tree->left) : 0;
	height_r = tree->right ? 1 + binary_tree_height(tree->right) : 0;
	return (height_l > height_r ? height_l : height_r);
}

/**
 * binary_tree_size - C function to print the size of a Node in a tree
 * @tree: pointer to tree/node to be checked
 * Return: size of tree
 */

size_t binary_tree_size(const binary_tree_t *tree)
{
	size_t size = 0;

	if (!tree)
		return (0);

	size += (binary_tree_size(tree->right) + binary_tree_size(tree->left) + 1);
	return (size);
}

/**
 * to_power - a to power b (2 ^ height of tree)
 * @a: 2
 * @b: height of tree
 * Return: number of nodes at last level for bianry tree to be "perfect"
 */
size_t to_power(size_t a, size_t b)
{
	if (b == 0)
		return (1);
	if (a == 1)
		return (b);
	return (a * to_power(a, b - 1));
}

/**
 * binary_tree_is_perfect - checks if perfectly filled like a triangle
 * @tree: tree
 * Return: 1 if perfect, 0 if not
 */
int binary_tree_is_perfect(const binary_tree_t *tree)
{
	size_t expected_num_nodes;

	if (!tree)
		return (0);

	expected_num_nodes = (to_power(2, (binary_tree_height(tree)) + 1) - 1);
	return (binary_tree_size(tree) == expected_num_nodes);
}

// dumb way
/**
 * binary_tree_is_perfect - checks whether a binary tree is perfect
 * @tree: the tree
 * Return: 1 if perfect, 0 if not
 */
int binary_tree_is_perfect(const binary_tree_t *tree)
{
	int tree_height;

	if (!tree)
		return (0);

	tree_height = height(tree);
	return (meets_perfect_condition(tree, tree_height));
}

/**
 * height - finds height of a tree
 * @tree: the tree
 * Return: height of the tree
 */
int height(const binary_tree_t *tree)
{
	if (!tree)
		return (0);
	if (!tree->left && !tree->right)
		return (1);
	return (
		1 + MAX(height(tree->left), height(tree->right)));
}

/**
 * meets_perfect_condition  - check whether node meets perfect tree condition
 * @node: the node
 * @tree_height: height of whole tree
 * Return: 1 if meets condition, else 0
 */
int meets_perfect_condition(const binary_tree_t *node, int tree_height)
{
	if (!node)
		return (0);
	if (is_leaf(node))
	{
		if ((int)binary_tree_depth(node) != tree_height)
			return (0);
		else
			return (1);
	}
	else if (!node->left || !node->right)
		return (0);
	return (
		meets_perfect_condition(node->left, tree_height) &&
		meets_perfect_condition(node->right, tree_height));
}

/**
 * is_leaf - checks whether node is leaf
 * @node: the node
 * Return: 1 if leaf, 0 if not
 */
int is_leaf(const binary_tree_t *node)
{
	return (node && !(node->left) && !(node->right));
}

/**
 * binary_tree_depth - measures node depth
 * @tree: node whose depth is to be measured
 * Return: depth of node
 */
size_t binary_tree_depth(const binary_tree_t *tree)
{
	binary_tree_t *iter = (binary_tree_t *)tree;
	size_t height = 0;

	if (!iter)
		return (0);

	while (iter->parent)
	{
		height += 1;
		iter = iter->parent;
	}
	return (height + 1);
}
